name: Deploy Python App

on:
  push:
    branches:
      - master  # Change as needed
  
permissions:
  id-token: write  # Enables OIDC authentication
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure using Federated Credentials
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0 

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.AZURE_STORAGE_CONTAINER }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="access_key=${{ secrets.AZURE_STORAGE_ACCESS_KEY }}"


      - name: Terraform Apply (ACR only)
        run: terraform apply -target=azurerm_container_registry.acr -auto-approve

      # Phase 2: Build & Push Docker image
      - name: Login to ACR
        run: az acr login --name gane0812

      - name: Build Docker image
        run: docker build -t gane0812.azurecr.io/repo/container:v1 .

      - name: Push image
        run: docker push gane0812.azurecr.io/repo/container:v1

      - name: Get ACR credentials
        id: acr
        run: |
          echo "ACR_USERNAME=$(az acr credential show --name gane0812 --query username -o tsv)" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$(az acr credential show --name gane0812 --query "passwords[0].value" -o tsv)" >> $GITHUB_ENV
      
      - name: Terraform Apply
        env:
          TF_VAR_acr_username: ${{ env.ACR_USERNAME }}
          TF_VAR_acr_password: ${{ env.ACR_PASSWORD }}
        run: terraform apply -auto-approve
  
